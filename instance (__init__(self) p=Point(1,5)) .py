"""
實體物件的建立與使用（類別的另一種用法）

類別兩種用法：
第一種：類別與類別屬性      （做一些工作 在class.py的檔案)
第二種：類別與實體物件、實體屬性 
（定義一個類別，目的是為了產生實體物件，並用實體物件包裝實體屬性）


===============================================
實體物件
===============================================
透過類別建立：
先定義類別，再透過類別建立實體物件

（要先建立實體物件，才能使用實體屬性）

===============================================
建立實體：
===============================================
class 類別名稱：   
    #定義初始化函式                   
    def __init__(self):              
        透過操作 self 來定義實體屬性
#建立實體物件，放入變數 obj 中     
obj=類別名稱()                          #呼叫初始化函式 (建立實體物件後，放入變數中，方便未來使用)


#在point類別中，建立一個初始化的函式
class Point: 
    def __init__(self):               #__init__是約定俗成
     self.x=3                         #self是不打會錯
     self.y=4                    
#建立實體物件
#此實體物件包含 x 和 y 兩個實體屬性
p=Point()                          #建立實體物件

"""

"""
30~33行：在point類別中，建立一個初始化的函式
32~33行：建立實體屬性
36行：建立實體物件


流程：
36行後，會呼叫初始化函式
呼叫初始化函式在這個實體物件身上，接上兩個實體屬性，一個叫x 另一個y
（實體屬性與上份class檔案中的類別屬性是兩個概念

實體屬性屬於建立好的實體物件，放在變數p裡面
"""
"""
class Point:
    def __init__(self,x,y):
         self.x=x
         self.y=y
#建立實體物件
#建立時，可直接傳入參數資料
p=Point(1,5)            

"""
"""
===============================================
使用實體：
===============================================
基本語法：
實體物件.實體屬性名稱

class Point:
    def __init__(self,x,y):
         self.x=x
         self.y=y
#建立實體物件，並取得實體屬性資料
p=Point(1,5)
print(p.x+p.y)


"""
"""
我的感覺：
70~76行，
感覺是70~73建立一個模板 
75行：建立好的模板給p用
（我的模板可以給p用，也可以給p1,p2用  
e.g. p1=Point(1,5) p2=Point(2,5)
 ======>p1.x再去做運算


"""


# ===============================================
# Point 實體物件的設計:平面座標上的點
# ===============================================
class Point:
    def __init__(self):
        self.x = 3
        self.y = 4  # 我們定義這個類別是為了產生實體物件


# 建立第一個實體物件 （類別名稱加小括號就會幫我們產生實體物件 再放入變數裡
p1 = Point()
print(p1.x, p1.y)
# 建立第二個實體物件
p2 = Point()
print(p2.x, p2.y)


# 透過初始化參數的函式做變化
class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y


p1 = Point(7, 8)
print(p1.x, p1.y)
p2 = Point(5, 6)
print(p2.x, p2.y)


# ===============================================
# Fullname 實體物件的設計:分開紀錄姓、名資料的全名
# ===============================================
class Fullname:
    def __init__(self):
        self.first = "C.W"
        self.last = "Peng"


name1 = Fullname()
print(name1.first, name1.last)


class Fullname:
    def __init__(self, first, last):
        self.first = first
        self.last = last


name1 = Fullname("Q.A", "Chou")
print(name1.first, name1.last)
name2 = Fullname("T.Y", "Lin")
print(name2.first, name2.last)


"""
Q:
__init__那行是在做什麼，請用初學者可以理解的方式說明

gpt:
__init__ 方法允许你在创建类的实例时初始化对象的属性。
这使得每个对象都可以具有不同的属性值，从而更好地模拟现实世界中的各种对象。


当你在 __init__ 方法中创建对象的属性时，需要使用 self 来标识这些属性属于对象。
如果你没有使用 self，那么属性值将不会被正确地分配给对象。
让我用一个例子来说明：

class Player:
    def __init__(self, name, health, energy):
        name = name
        health = health
        energy = energy

player1 = Player("Alice", 100, 50)
print(player1.name)  # 这里会出错，因为name属性并没有被正确设置

在这个例子中，我在 __init__ 方法中没有使用 self 来引用对象，而是直接用变量名赋值。
这会导致属性值只在 __init__ 方法的作用域内有效，无法正确地分配给对象。

"""


"""
Q:
謝謝老師的新手教學影片，但看到現在開始糊塗，想請教老師。
看起來函式、模組、類別、實體，都可以在程式內呼叫並使用，
那...他們最主要的差別在哪裡呢? 什麼時候會使用到函式或模組等....


a:
你想要把一段程式包裝起來重複呼叫使用就使用函式，
程式碼全部放在一個檔案看起來太過肥大，
就分成多個程式檔案然後引入後使用，就是模組。



"""
